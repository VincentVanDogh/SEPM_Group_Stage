package at.ac.tuwien.sepm.groupphase.backend.service;

import at.ac.tuwien.sepm.groupphase.backend.endpoint.dto.CreateInvoiceDto;
import at.ac.tuwien.sepm.groupphase.backend.entity.Invoice;
import at.ac.tuwien.sepm.groupphase.backend.entity.MerchPurchase;
import at.ac.tuwien.sepm.groupphase.backend.entity.TicketAcquisition;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

public interface InvoiceService {

    /**
     * Find all invoices for a given user.
     *
     * @param userId the id of the user attempting to get the invoices/cancellations
     */
    List<Invoice> getAllForUser(Long userId);

    /**
     * Find all regular invoices for a given user.
     *
     * @param userId the id of the user attempting to get the invoices
     */
    List<Invoice> getAllRegularInvoicesForUser(Long userId);

    /**
     * Find a single invoice/cancellation by id and construct a PDF.
     *
     * @param response the response that will contain the invoice pdf
     * @param id the id of the invoice
     * @param userId the id of the user attempting to get the invoice
     */
    void getById(HttpServletResponse response, Long id, Long userId) throws IOException;

    /**
     * Find a single regular invoice by referenceNr.
     *
     * @param response the response that will contain the invoice pdf
     * @param referenceNr the referenceNr of the invoice
     * @param userId the referenceNr of the user attempting to get the invoice
     */
    void getInvoiceById(HttpServletResponse response, Long referenceNr, Long userId) throws IOException;

    /**
     * Find a single cancellation by referenceNr.
     *
     * @param response the response that will contain the cancellation pdf
     * @param referenceNr the referenceNr of the cancellation
     * @param userId the referenceNr of user attempting to get the cancellation
     */
    void getCancellationById(HttpServletResponse response, Long referenceNr, Long userId) throws IOException;

    /**
     * Save a single invoice/cancellation for either a ticket acquisition or a merch purchase.
     *
     * @param createInvoiceDto the invoice details
     * @param ticketAcquisition the related ticket acquisition
     * @param merchPurchase the related merch purchase
     * */
    void save(CreateInvoiceDto createInvoiceDto, TicketAcquisition ticketAcquisition, MerchPurchase merchPurchase);

    /**
     * Save multiple regular invoices generated by the dataGenerator. Ensures that referenceNr stays consistent with dates
     * (earlier invoices have smaller referenceNr).
     *
     * @param invoices a list of regular invoices
     * */
    void saveAll(List<Invoice> invoices);

    /**
     * Get cancellations for a given reference number of an invoice.
     *
     * @param invoiceReferenceNo the reference number of the invoice to find cancellations for
     *
     * @return list of cancellations of the invoice
     */
    List<Invoice> getCancellationsForInvoiceReferenceNo(Long invoiceReferenceNo);

}
